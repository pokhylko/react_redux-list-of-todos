{"version":3,"sources":["store/index.ts","api/api.js","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["STATUS","currentUser","state","user","todoStatus","status","getInput","input","initialState","todos","sortedTodos","filter","todo","title","completed","toLowerCase","includes","store","createStore","action","type","map","id","todoId","sort","Math","random","composeWithDevTools","applyMiddleware","thunk","BASE_URL","todosFromServer","fetch","then","response","json","userFromServer","userId","Todo","dispatch","useDispatch","useSelector","checked","readOnly","onChange","className","classNames","onClick","getUser","setUser","data","loadUser","TodoList","search","htmlFor","value","event","target","name","sortStatus","key","CurrentUser","email","phone","App","length","getTodos","setTodos","loadTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.385f0108.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { TodoInterface, UserInterface } from '../components/interfaces';\n\nexport const STATUS = {\n  all: 'all',\n  active: 'active',\n  complited: 'complited',\n};\n\n// Action types - is just a constant. MUST have a unique value.\nconst SET_TODOS = 'SET_TODOS';\nconst SET_USER = 'SET_USER';\nconst CLEAR_SELECTED_USER = 'CLEAR_SELECTED_USER';\nconst CHANGE_TODO_STATUS = 'CHANGE_TODO_STATUS';\nconst SORT_STATUS = 'SORT_STATUS';\nconst FILTER_INPUT = 'FILTER_INPUT';\nconst RANDOMIZE_TODOS = 'RANDOMIZE_TODOS';\nconst REMOVE_TODO = 'REMOVE_TODO';\n\n// Action creators - a function returning an action object\nexport const setTodos = (todos: TodoInterface[]) => ({ type: SET_TODOS, todos });\nexport const setUser = (user: UserInterface[]) => ({ type: SET_USER, user });\nexport const clearSelectedUser = () => ({ type: CLEAR_SELECTED_USER });\nexport const changeTodoStatus = (todoId: number) => ({ type: CHANGE_TODO_STATUS, todoId });\nexport const sortStatus = (status: string) => ({ type: SORT_STATUS, status });\nexport const filterInput = (input: string) => ({ type: FILTER_INPUT, input });\nexport const randomizeTodos = () => ({ type: RANDOMIZE_TODOS });\nexport const removeTodo = (todoId: number) => ({ type: REMOVE_TODO, todoId });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const currentUser = (state: RootState) => state.user;\nexport const todoStatus = (state: RootState) => state.status;\nexport const getInput = (state: RootState) => state.input;\n\n// Initial state\nexport type RootState = {\n  todos: TodoInterface[],\n  user: UserInterface | null,\n  status: string,\n  input: string,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n  status: '',\n  input: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return { ...state, todos: [...action.todos] };\n\n    case SET_USER:\n      return { ...state, user: action.user };\n    \n    case CLEAR_SELECTED_USER:\n      return { ...state, user: null };\n    \n    case CHANGE_TODO_STATUS:\n      return { ...state,\n        todos: [...state.todos].map((todo: TodoInterface) => todo.id !== action.todoId\n          ? todo\n          : {\n            ...todo,\n            completed: !todo.completed,\n          }\n        )\n      };\n\n    case SORT_STATUS:\n      return { ...state, status: action.status };\n\n    case FILTER_INPUT:\n      return { ...state, input: action.input };\n\n    case RANDOMIZE_TODOS:\n      return { ...state,\n        todos: [...state.todos].sort(() => Math.random() - 0.5),\n      };\n\n    case REMOVE_TODO:\n      return { ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.todoId),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const loadTodos = (getTodos: any) => {\n  return (dispatch: any) => {\n    getTodos()\n      .then((todos: any) => {\n        dispatch(setTodos(todos.data))\n      })\n  }\n};\n\nexport const loadUser = (getUser: any, userId: number) => {\n  return (dispatch: any) => {\n    getUser(userId)\n      .then((user: any) => {\n        dispatch(setUser(user.data))\n      })\n  }\n};\n\nexport const sortedTodos = (state: RootState) => {\n  return [...state.todos]\n    .filter(todo => todo.title)\n    .filter(todo => {\n      switch (state.status) {\n        case STATUS.active:\n          return !todo.completed;\n        case STATUS.complited:\n          return todo.completed;\n        default:\n          return todo;\n      }\n    })\n    .filter(todo => todo.title.toLowerCase().includes(state.input.toLowerCase()))\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function todosFromServer() {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport function userFromServer(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './Todo.scss';\nimport { loadUser, currentUser, changeTodoStatus, removeTodo } from '../../store';\nimport { TodoInterface } from '../../components/interfaces';\nimport { userFromServer } from '../../api/api';\nimport classNames from 'classnames';\n\ninterface Props {\n  todo: TodoInterface;\n}\n\nexport const Todo = ({ todo }: Props) => {\n  const { id, userId, title, completed } = todo;\n  const dispatch = useDispatch();\n\n  const user = useSelector(currentUser);\n\n  const changeStatus = () => {\n    dispatch(changeTodoStatus(id));\n  };\n\n  const loadUserInfo = () => {\n    dispatch(loadUser(userFromServer, userId));\n  };\n\n  const setRemoveTodo = () => {\n    dispatch(removeTodo(id));\n  };\n\n  return (\n    <>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          readOnly\n          onChange={changeStatus}\n        />\n        <p>{title}</p>\n      </label>\n\n      <div className=\"TodoList_buttons\">\n        <button\n          className={classNames(\n            'button',\n            'TodoList__user-button',\n            {\n              'TodoList__user-button--selected': user\n                ? user.id === userId\n                : false,\n            },\n          )}\n          type=\"button\"\n          onClick={loadUserInfo}\n        >\n          {`User #${userId}`}\n        </button>\n\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={setRemoveTodo}\n        >\n          Remove\n        </button>\n      </div>\n    </>\n  )\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { TodoInterface } from '../../components/interfaces';\nimport { Todo } from '../Todo/';\nimport { sortStatus, STATUS, todoStatus, getInput, filterInput, randomizeTodos } from '../../store';\n\ninterface Props {\n  todos: TodoInterface[];\n}\n\nexport const TodoList = ({ todos }: Props) => {\n  const dispatch = useDispatch();\n\n  const status = useSelector(todoStatus);\n  const search = useSelector(getInput);\n\n  const getFilterInput = (event: any) => {\n    dispatch(filterInput(event.target.value));\n  };\n  \n  const getSortStatus = (event: any) => {\n    dispatch(sortStatus(event.target.value));\n  };\n  \n  const getRandomizeTodos = () => {\n    dispatch(randomizeTodos());\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filter\">\n        <label htmlFor=\"search\">\n          Search\n          <input\n            type=\"text\"\n            id=\"search\"\n            value={search}\n            onChange={getFilterInput}\n          />\n        </label>\n\n        <label htmlFor=\"complite\">\n          Complite\n          <select\n            name=\"complite\"\n            id=\"complite\"\n            value={status}\n            onChange={getSortStatus}\n          >\n            <option value={STATUS.all}>{STATUS.all}</option>\n            <option value={STATUS.active}>{STATUS.active}</option>\n            <option value={STATUS.complited}>{STATUS.complited}</option>\n          </select>\n        </label>\n\n        <button\n          className=\"button\"\n          type=\"submit\"\n          onClick={getRandomizeTodos}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map((todo: TodoInterface) => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <Todo todo={todo} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './CurrentUser.scss';\nimport { clearSelectedUser } from '../../store';\n// import { UserInterface } from '../../components/interfaces';\n\n// interface Props {\n//   user: UserInterface;\n// }\n\n// export const CurrentUser = ({ user }: Props) => {\n  export const CurrentUser = ({ user }: any) => {\n  const { id, name, email, phone } = user;\n  const dispatch = useDispatch();\n\n  const clearUser = () => {\n    dispatch(clearSelectedUser());\n  };\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${id}`}</span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{name}</h3>\n      <p className=\"CurrentUser__email\">{email}</p>\n      <p className=\"CurrentUser__phone\">{phone}</p>\n\n      <button\n        className=\"CurrentUser__clear button\"\n        type=\"submit\"\n        onClick={clearUser}\n      >\n        Clear\n      </button>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList/';\nimport { CurrentUser } from './components/CurrentUser/';\n\nimport { loadTodos, sortedTodos, currentUser } from './store';\nimport { todosFromServer } from './api/api';\n\nconst App = () => {\n  const todos = useSelector(sortedTodos);\n  const user = useSelector(currentUser);\n\n  const dispatch = useDispatch();\n\n  const getTodos = () => {\n    dispatch(loadTodos(todosFromServer));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n\n      {todos.length === 0\n        ? (\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={getTodos}\n          >\n            Start\n          </button>\n        )\n        : (\n          <div className=\"App__container\">\n            <div className=\"App__sidebar\">\n              <div className=\"TodoList\">\n                <TodoList todos={todos} />\n              </div>\n            </div>\n            <div className=\"App__content\">\n              {user\n                ? (<CurrentUser user={user} />)\n                : ('No user selected')\n              }\n            </div>\n          </div>\n        )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}